# Filename: cloudbuild.yaml

steps:
  # --- NEW DIAGNOSTIC STEP ---
  # 1. Billing Sanity Check
  # This step attempts a simple, read-only command that requires an active billing account.
  # If this step fails with a billing error, it confirms the root cause of the issue.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "Billing Sanity Check"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "--- Running Billing Sanity Check ---"
        gcloud services list --project=${PROJECT_ID}
        echo "--- Billing Sanity Check PASSED ---"

  # 2. Create Artifact Registry Repo if it doesn't exist
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "Setup Artifact Registry"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud artifacts repositories describe sara-repo --location=us-central1 || \
        gcloud artifacts repositories create sara-repo \
          --repository-format=docker \
          --location=us-central1 \
          --description="SARA application container repository"
    waitFor:
      - "Billing Sanity Check"

  # ... (rest of the file is the same as before) ...
  
  # 3. Build the retrieval-service
  - name: 'gcr.io/cloud-builders/docker'
    id: "Build retrieval-service"
    args: ['build', '--no-cache', '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/sara-repo/retrieval-service:latest', './src/retrieval_service']
    waitFor: ["Setup Artifact Registry"]

  # 4. Push the retrieval-service image
  - name: 'gcr.io/cloud-builders/docker'
    id: "Push retrieval-service"
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/sara-repo/retrieval-service:latest']
    waitFor: ["Build retrieval-service"]

  # 5. Build the frontend-service
  - name: 'gcr.io/cloud-builders/docker'
    id: "Build frontend-service"
    args: ['build', '--no-cache', '-t', 'us-central1-docker.pkg.dev/${PROJECT_ID}/sara-repo/frontend-service:latest', './src/frontend_service']
    waitFor: ["Setup Artifact Registry"]

  # 6. Push the frontend-service image
  - name: 'gcr.io/cloud-builders/docker'
    id: "Push frontend-service"
    args: ['push', 'us-central1-docker.pkg.dev/${PROJECT_ID}/sara-repo/frontend-service:latest']
    waitFor: ["Build frontend-service"]

  # 7. Initialize Terraform
  - name: 'hashicorp/terraform:1.5.7'
    id: "Terraform init"
    entrypoint: 'terraform'
    args: ['init', '-reconfigure']
    waitFor: ["Billing Sanity Check"]

  # 8. Apply Terraform configuration
  - name: 'hashicorp/terraform:1.5.7'
    id: "Terraform apply"
    entrypoint: 'terraform'
    args: ['apply', '-auto-approve', '-var', 'project_id=${PROJECT_ID}']
    waitFor: ["Terraform init", "Push retrieval-service", "Push frontend-service"]

  # 9. Run Database Migrations
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "Run Database Migrations"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y python3 python3-pip
        pip3 install -r src/retrieval_service/requirements.txt
        curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-proxy/v2.8.2/cloud-sql-proxy.linux.amd64
        chmod +x cloud-sql-proxy
        chmod +x ./scripts/run_migrations.sh
        ./scripts/run_migrations.sh
    env:
      - 'DB_USER=${_DB_USER}'
      - 'DB_PASSWORD=${_DB_PASS}'
      - 'DB_NAME=${_DB_NAME}'
      - 'DB_INSTANCE=${_DB_INSTANCE}'
      - 'DB_PROJECT=${PROJECT_ID}'
      - 'DB_REGION=${_REGION}'
    waitFor: ["Terraform apply"]

# Image configuration
images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/sara-repo/retrieval-service:latest'
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/sara-repo/frontend-service:latest'

# Logging configuration
options:
  logging: CLOUD_LOGGING_ONLY