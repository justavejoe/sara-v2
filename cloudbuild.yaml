steps:
  # 1. Create Artifact Registry Repo if it doesn't exist
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "Setup Artifact Registry"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud artifacts repositories describe sara-repo --location=${_REGION} || \
        gcloud artifacts repositories create sara-repo \
          --repository-format=docker \
          --location=${_REGION} \
          --description="SARA application container repository"

  # 2. Build the retrieval-service
  - name: 'gcr.io/cloud-builders/docker'
    id: "Build retrieval-service"
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/sara-repo/retrieval-service:latest'
      - './src/retrieval_service'
    waitFor:
      - "Setup Artifact Registry"

  # 3. Push the retrieval-service image
  - name: 'gcr.io/cloud-builders/docker'
    id: "Push retrieval-service"
    args: ['push', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/sara-repo/retrieval-service:latest']
    waitFor:
      - "Build retrieval-service"

  # 4. Build the frontend-service
  - name: 'gcr.io/cloud-builders/docker'
    id: "Build frontend-service"
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/sara-repo/frontend-service:latest'
      - './src/frontend_service'
    waitFor:
      - "Setup Artifact Registry"

  # 5. Push the frontend-service image
  - name: 'gcr.io/cloud-builders/docker'
    id: "Push frontend-service"
    args: ['push', 'us-central1-docker.pkg.dev/${_PROJECT_ID}/sara-repo/frontend-service:latest']
    waitFor:
      - "Build frontend-service"

  # 6. Initialize Terraform
  - name: 'hashicorp/terraform:1.5.7'
    id: "Terraform init"
    entrypoint: 'terraform'
    args: ['init', '-reconfigure']

  # 7. Apply Terraform configuration
  - name: 'hashicorp/terraform:1.5.7'
    id: "Terraform apply"
    entrypoint: 'terraform'
    args: ['apply', '-auto-approve', '-var', 'project_id=${_PROJECT_ID}']
    waitFor:
      - "Terraform init"
      - "Push retrieval-service"
      - "Push frontend-service"

  # 8. Run Database Migrations (Cloud SQL Auth Proxy v2.x)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: "Run Database Migrations"
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y python3 python3-pip
        pip3 install -r src/retrieval_service/requirements.txt

        rm -f cloud-sql-proxy
        curl -o cloud-sql-proxy "${_CLOUD_SQL_PROXY_URL}"
        chmod +x cloud-sql-proxy
        chmod +x ./scripts/run_migrations.sh

        # Start the proxy in the background using the correct v2.x syntax
        ./cloud-sql-proxy "${_PROJECT_ID}:${_REGION}:${_DB_INSTANCE}" --address=0.0.0.0 --port=5432 &
        PROXY_PID=$!
        sleep 5  # Give the proxy time to start

        ./scripts/run_migrations.sh

        kill $PROXY_PID
    env:
      - 'DB_USER=${_DB_USER}'
      - 'DB_PASSWORD=${_DB_PASS}'
      - 'DB_NAME=${_DB_NAME}'
      - 'DB_INSTANCE=${_DB_INSTANCE}'
      - 'DB_PROJECT=${_PROJECT_ID}'
      - 'DB_REGION=${_REGION}'
    waitFor:
      - "Terraform apply"

images:
  - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/sara-repo/retrieval-service:latest'
  - 'us-central1-docker.pkg.dev/${_PROJECT_ID}/sara-repo/frontend-service:latest'

options:
  logging: CLOUD_LOGGING_ONLY
